import discord
from discord.ext import commands, tasks
from discord.voice_client import VoiceClient
from discord.ext.commands import Bot
import youtube_dl
import os
import asyncio
import random
from random import choice
from keep_alive import keep_alive
import requests
import json
from replit import db
#from music import Player

intents = discord.Intents.default()
intents.members = True
youtube_dl.utils.bug_reports_message = lambda: ''

ytdl_format_options = {
    'format': 'bestaudio',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0' # bind to ipv4 since ipv6 addresses cause issues sometimes
}

ffmpeg_options ={'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.7):
        super().__init__(source, volume)

        self.data = data

        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=True, download=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)


client = commands.Bot(command_prefix='-',case_insensitive=True, intents=intents)

status = ['Jamming out to music!', 'Eating!', 'Sleeping!']

queue = {}
# Anime Quote using API
def get_anime():
  response = requests.get("https://animechan.vercel.app/api/random").json()
  character = response['character']
  quote = response['quote']

  Q = character +" : "+quote
  return(Q)

# Inspirational Quote using API
def get_quote():
  response = requests.get("https://zenquotes.io/api/random")
  json_data = json.loads(response.text)
  Quote = json_data[0]['q'] + " : " + json_data[0]['a']
  return(Quote)

#MANGALAM DO THE CHANGES. ISKE KARAN CODE KAAM NHI KR RAHA
PREFIX = ("-")
bot = commands.Bot(command_prefix=PREFIX, description='Hi')
@client.event
async def on_ready():
    await client.change_presence(status=discord.Status.idle, activity=discord.Activity(type=discord.ActivityType.listening, name="-help | -invite | \n Under Development"))
    print("Bot is ready!")
    

@client.event
async def on_member_join(member):
  print (f'{member} has joined the server.')
  await member.send('Thank You for joining our server! Type -help for help with commands')
  channel = discord.utils.get(member.guild.channels, name='general')
  await channel.send(f'Welcome {member.mention}!  Ready to jam out? See `-help` command for details!')

@client.event
async def on_member_remove(member):
  print(f'{member} has left the serevr')


@client.command(name='ping', help='This command returns the latency')
async def ping(ctx):
      await ctx.send(f'**Pong!** Latency: {round(client.latency * 1000)}ms')

# Hello response 
@client.command(name='hello', help='This command returns a random welcome message', aliases = ['hey', 'hi', 'wassup','aloha'])
async def hello(ctx):
    responses = ['***grumble*** Why did you wake me up?', 'Top of the morning to you lad!', 'Hello, how are you?', 'Hi', '**Wasssuup!**']
    await ctx.send(choice(responses))

# die command
@client.command(name='die', help='This command returns a random last words')
async def die(ctx):
    responses = ['why have you brought my short life to an end', 'i could have done so much more', 'i have a family, kill them instead']
    await ctx.send(choice(responses))

# Creator and thanking youtube!!
@client.command(name='credits', help='This command returns the credits')
async def credits(ctx):
    await ctx.send('ImMortal & Kronos')
    await ctx.send('Thanks to Youtube xd')

# Random Anime Quotes
@client.command(name='anime', help='This command returns Random statement from an anime character')
async def anime(ctx):
  await ctx.send(get_anime())

# Random Inspirational Quotes
@client.command(name='inspire', help='This commands returns a Random Inspirational Quote')
async def inspired(ctx):
  await ctx.send(get_quote())

#clear chat command
@client.command(name='clear' , help='This command clears the chat in the channel by the number user inputs or 5 chats by default')
async def clear(ctx, amount=5):
  await ctx.channel.purge(limit=amount)

#invite command to get the invite link of the bot

@client.command()
async def invite(ctx):
  await ctx.send(f'https://discordapp.com/oauth2/authorize?&client_id=897849135384907886&scope=bot')

#random answer to a user question from library of answers
@client.command(aliases = ['8ball', 'carrom'])
async def jin(ctx, *, question):
  responses = ['It is certain',
               'It is decidedly so',
               'Yes! OfCourse!',
               'Positive',
               'Probably',
               'That might be the case',
               'Absolutely Positive',
               'Yes! Without any doubt',
               'Not sure',
               'There is some certainity',
               'Maybe. Who Knows!',
               'Big NO!',
               'Not till my life ends',
               'Probably No',
               'No Chance',
               'Dont hope anything',
               'Most probably No',
               'No Possibility']
  await ctx.send(f' Question : {question}\n Answer : {random.choice(responses)}')


#-----------------Moderation Commands------------------#
@client.command()
async def kick(ctx, member:discord.Member, *, reason=None):
  await member.kick(reason = reason)
  await ctx.send(f' {member} has been kicked by {ctx.author}')

@client.command()
async def ban(ctx, member:discord.Member, *, reason = None):
  await member.ban(reason = reason)
  await ctx.send(f' {member} has been banned by {ctx.author}')

@client.command()
async def unban(ctx, *, member):
  banned_users = await ctx.guild.bans()
  member_name,member_discriminator = member.split('#')
  for ban_entry in banned_users:
    user = ban_entry.user

    if(user.name, user.discriminator)==(member_name, member_discriminator):
      await ctx.guild.unban(user)
      await ctx.send(f' Unbanned {user.name} # {user.discriminator} by {ctx.author}')
      await ctx.send ( f' Welcome back {user.mention}')
      return

# -------------------------------------------------MEME COMMANDS--------------------------------------------------

@client.command(name='meme',help='This command returns a random meme from Reddit')
async def reddit(ctx):
    r = requests.get("https://memes.blademaker.tv/api?lang=en")
    res = r.json()
    title = res["title"]
    ups = res["ups"]
    downs = res["downs"]
    sub = res["subreddit"]
    m = discord.Embed(title =f"{title}\nSubreddit: {sub}")
    color = discord.Color.red()
    m.set_image(url = res["image"])
    m.set_footer(text=f"üëç: {ups} üëé: {downs}  | Meme requested by : {ctx.author}")
    await ctx.send(embed = m)



# ---------------------------------------------MUSIC PLAYER COMMANDS----------------------------------------------
queues = {}
#PLAY COMMAND

@client.command(name='play', help='This command plays music')
async def play(ctx, *, url):
    if not ctx.message.author.voice:
        await ctx.send("You are not connected to a voice channel")
        return

    else:
        
        channel = ctx.message.author.voice.channel

    await channel.connect()

    server = ctx.message.guild
    voice_channel = server.voice_client
    ctx.voice_client.stop()

    async with ctx.typing():
        player = await YTDLSource.from_url(url, loop=client.loop)
        voice_channel.play(player, after=lambda e: print('Player error: %s' % e) if e else None)

    await ctx.send('**Now playing:** {}'.format(player.title))

#queueing songs

@client.command(name='queue', aliases=['q','que'])
async def queue(ctx, *, url):
  global queues
  queues.append(url)
  await ctx.send(f' **{url}** added to queue')

#removing from queue

@client.command(name='remove',aliases=['r','rem'])
async def remove(ctx, number):
  number+=1
  global queue

  try:
    del(queue[int(number)])
    await ctx.send(f'Queue updated')
    
  except:
    await ctx.send(' Your queue is either Empty or the index is out of bounds')

#Viewing the queue
@client.command(name='viewqueue', aliases=['vq','view'])
async def viewqueue(ctx):
  await ctx.send(f' Your Queue is **{queues}** ')




#PAUSE command
@client.command(name='pause', help='This command pauses the music')
async def pause(ctx):
  voice_client = ctx.message.guild.voice_client
  if voice_client.is_playing():
    voice_client.pause()
    await ctx.send('**player is paused**')
  else:
    await ctx.send("Currently no audio is playing.")

#RESUME command
@client.command(name='resume', help='This command resumes the paused music')
async def resume(ctx):
  voice_client = ctx.message.guild.voice_client
  if voice_client.is_paused():
    voice_client.resume()
    await ctx.send('**palyer is resuming**')
  else:
    await ctx.send("Currently audio is not paused.")

#STOP command
@client.command(name='stop', help='This command stops the music and makes the bot leave the voice channel')
async def stop(ctx):
    voice_client = ctx.message.guild.voice_client
    # await ctx.send("Bye! Bye!")
    await voice_client.stop()

#LEAVE command
@client.command(name='leave', help='This command stops the music and makes the bot leave the voice channel')
async def leave(ctx):
  voice_client = ctx.message.guild.voice_client
  await voice_client.disconnect()


#-----------------------------------------------------------------------------------------------------------------

keep_alive()

client.run(os.environ['TOKEN'])
